<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Review on Run</title>
    <link>https://LeiBuDao.github.io/tags/review/</link>
    <description>Recent content in Review on Run</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 21 Dec 2021 15:04:19 +0800</lastBuildDate><atom:link href="https://LeiBuDao.github.io/tags/review/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件体系结构期末复习</title>
      <link>https://LeiBuDao.github.io/posts/safinalexam/</link>
      <pubDate>Tue, 21 Dec 2021 15:04:19 +0800</pubDate>
      
      <guid>https://LeiBuDao.github.io/posts/safinalexam/</guid>
      <description>第一章—软件体系结构概述 1、软件体系结构的主要思想 软件架构是一个软件系统的设计图，并不局限于软件系统的总体结构，还包含一些质量属性以及功能与结构之间的映射关系，即设计决策。 软件架构的两个主要焦点集中于系统的总体结构以及需求和实现之间的对应。 软件架构的主要思想是将注意力集中在系统总体结构的组织上。 2、软件架构的特征 特征 实现方式 作用 注重可重用性 组件及架构级重用 提高软件质量 利益相关者众多 满足各利益相关者需求 平衡需求 关注点分离 分而治之、模块化 简化复杂性 质量驱动 使用软件架构来处理质量属性需求、控制复杂性 由功能、数据流驱动向质量驱动转变 概念完整性 强调设计决策是一个持续的过程 每个决策都要在其前面设计决策的基础上进行 循环风格 架构风格、架构模式 用标准方法来处理反复出现的问题 3、软件架构的发展阶段 （1）无体系结构 ​ 高级语言出现
（2）基础研究阶段（1968-1994）
​ 面向过程开发
（3）核心技术形成（1991-2000）
​ 面向对象开发
​ 1）软件架构作为一个独立的研究领域出现
​ 2）软件架构核心技术的发展
​ 3）软件组件技术
（4）理论体系丰富（1996-1999） ​ 面向服务开发
（5）理论体系完善及普及应用（1999-至今） ​ 云和移动服务、智能化软件开发
第二章—软件架构定义 1、概述 组成派关注于软件本身，将软件架构看做组件和交互的集合。 决策派关注于架构中的实体(人)，将软件架构视为一系列重要设计决策的集合。 2、组成派定义 依据：软件架构主要反映系统由哪些部分组成，以及这些部分是如何组成的，强调系统的整体结构和配置。
（1）1992 —Dewane Perry &amp;amp; Alexander Wolf
​ 软件架构 = {元素、组成、原理}
架构元素：，具有一定形式的结构元素，包括处理元素、数据元素、连接元素
架构组成：
加权的属性：约束架构的选择
关系：约束架构元素的放置
架构原理：捕获在选择架构风格、架构元素和架构形式的选择动机。</description>
    </item>
    
  </channel>
</rss>
