<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SA on Run</title>
    <link>https://LeiBuDao.github.io/tags/sa/</link>
    <description>Recent content in SA on Run</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 23 Dec 2021 10:55:47 +0800</lastBuildDate><atom:link href="https://LeiBuDao.github.io/tags/sa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件体系结构期末复习</title>
      <link>https://LeiBuDao.github.io/posts/safinalexam/</link>
      <pubDate>Thu, 23 Dec 2021 10:55:47 +0800</pubDate>
      
      <guid>https://LeiBuDao.github.io/posts/safinalexam/</guid>
      <description>第二章 1、概述  组成派关注于软件本身，将软件架构看做组件和交互的集合。 决策派关注于架构中的实体(人)，将软件架构视为一系列重要设计决策的集合。  2、组成派定义 依据：软件架构主要反映系统由哪些部分组成，以及这些部分是如何组成的，强调系统的整体结构和配置。  （1）1992 —Dewane Perry &amp;amp; Alexander Wolf
软件架构 = {元素、组成、原理}
  架构元素：处理元素、数据元素、连接元素
  架构组成：
  加权的属性：约束架构的选择
  关系：约束架构元素的放置
    架构原理：捕获在选择架构风格、架构元素和架构形式的选择动机。
  （2）Mary Shaw &amp;amp; David Carlan
软件架构包括组件、连接件和约束三大要素。
 组件：可以是一组代码，也可以是独立的程序。 连接件：可以是过程调用、管道和消息等，用于表示组件间的相互关系。 约束：组件连接时的条件。  （3）2011年 ISO/IEC/IEEE标准
软件架构是某一系统的基本组织结构，其内容包括软件组件、组件间的联系、组件与其环境间的关系，以及指导上述内容设计与演化的原理。
3、决策派定义 依据：软件架构是软件设计的一部分，软件设计实际上是开发人员意志和决策在软件开发过程中的体现，强调设计决策，更加注重架构风格和模式选择。  4、参考定义框架 组件（Component）、连接件（Connector）、配置（Configuration）、端口（Port）、角色（Role）
 组件：具有某种功能的可重用的软件模块单元。 连接件：表示了组件之间的交互。 配置：表示了组件和连接件的拓扑逻辑和约束。 端口：组件的接口由一组端口组成，每个端口表示了组件和外部环境的交汇点。 角色：连接件的接口由一组角色组成，连接件的每个角色定义了该连接件表示的交互的参与者。  二元连接件有两个角色 有的连接件有多于两个的角色    第三章 至今没有一种建模方法能够满足软件架构建模的所有要求。</description>
    </item>
    
  </channel>
</rss>
